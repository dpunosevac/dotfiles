"===============================================================================
" "Nature is pleased with simplicity. And nature is no dummy” - Isaac Newton
"
"                                 \/       \/
"                                 /\_______/\
"                                /   o   o   \
"                               (  ==  ^  ==  )
"                                )           (
"                               (             )
"                               ( (  )   (  ) )
"                              (__(__)___(__)__)
"                                 O l i v e r
"
"===============================================================================

" {{{ Base Settings
set number relativenumber numberwidth=7 ruler colorcolumn=80
set cursorline cursorcolumn wildmenu termguicolors bg=dark
set confirm showtabline=2
try
  let g:pastelcula_transparent=1
  colo pastelcula
catch
  colo darkblue
endtry
set tabstop=2 shiftwidth=2 expandtab autoindent
set mouse=a
set list listchars=tab:▷▷,trail:␣,nbsp:⍽
filetype on
syntax on
set hlsearch incsearch shortmess-=S
set ignorecase smartcase
set scrolloff=7
set foldmethod=marker foldlevel=0
set wildmenu wildmode=longest,list,full
set spell spelllang=en_us spellsuggest=best,8
" }}}

" {{{ Base keybindings
" Leader
nnoremap <SPACE> <Nop>
let mapleader=' '
inoremap <silent> jk <ESC>:update<CR>
" Auto pairs
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap {<CR> {<CR>}<ESC>ko<TAB>
" Insert navigation
inoremap <C-h> <LEFT>
inoremap <C-j> <DOWN>
inoremap <C-k> <UP>
inoremap <C-l> <RIGHT>
" Search
nnoremap <leader>/ :let @/=''<CR>
nnoremap n nzz
nnoremap N Nzz
" Select all
nnoremap <leader>a gg<S-v>G
" Terminal ESC
tnoremap <ESC> <C-\><C-n>
" Spell check
inoremap <C-s> <C-g>u<ESC>[s1z=`]a<C-g>u
nnoremap <C-s> z=
nnoremap <leader>st :set spell!<CR>
" Split pane
nnoremap <leader>\| :vsplit<CR><C-w>l
nnoremap <leader>- :split<CR><C-w>j
nnoremap <leader>q <C-w>q
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader><LEFT> <C-w>10<
nnoremap <leader><DOWN> <C-w>5-
nnoremap <leader><UP> <C-w>5+
nnoremap <leader><RIGHT> <C-w>10>
" Tab
nnoremap <leader>n :ls<CR>
          \:echo 'Choose a buf or enter to create a tab with curr buf'<CR>
          \:tab sb<SPACE>
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 10gt
" Buffer
nnoremap <leader>b :ls<CR>:b<SPACE>
nnoremap <leader>, :bprevious<CR>
nnoremap <leader>. :bnext<CR>
nnoremap <leader>x :ls<CR>:bdelete<SPACE>
" Some bindings from Theovim
nnoremap <leader>t :call ToggleNetrw()<CR>
nnoremap <leader>z :botright term<CR>
" Brings up auto completion menu using S-TAB, cycle through TAB and S-TAB
inoremap <expr><TAB> pumvisible() ? '<C-n>' : '<TAB>'
inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-n>'
" }}}

" {{{ Statusline
let g:currentmode={
  \ 'n' : 'N', 'no' : 'N OPERATOR PENDING',
  \ 'v' : 'V', 'V' : 'V LINE', "\<C-V>" : 'V BLOCK',
  \ 's' : 'SELECT', 'S' : 'S LINE', "\<C-S>" : 'S BLOCK',
  \ 'i' : 'I', 'R' : 'R', 'Rv' : 'V REPLACE',
  \ 'c' : 'CMD', 'cv' : 'VIM EX', 'ce' : 'EX',
  \ 'r' : 'PROMPT', 'rm' : 'MORE', 'r?' : 'CONFIRM',
  \ '!' : 'SH', 't' : 'TERM', 'nt' : 'N TERM' }
set laststatus=2                                      " Always show statusline
set statusline=\|                                     " Reset statusline w/ bar
set statusline+=\ [%{toupper(g:currentmode[mode()])}] " Current mode
set statusline+=\ %f                                  " Current file
set statusline+=\ %m                                  " [+] for modified, [-] for !modifiable
set statusline+=%r                                    " [RO] for read only
set statusline+=\|                                    " Bar
set statusline+=%=                                    " Spacer
set statusline+=%<                                    " Truncate the following modules if win too small
set statusline+=Messing\ w\ vimrc\ again\ %{'ʕ•́ᴥ•̀?'}  " No particular reason why it's in {}
set statusline+=%=                                    " Spacer
set statusline+=\ \|                                  " Space + Bar
set statusline+=\ FT:\ %Y                             " Filetype
set statusline+=\ \|                                  " Space + Bar
set statusline+=\ %{toupper(&ff)}                     " File format
set statusline+=:                                     " Colon
set statusline+=%{(&fenc!=''?&fenc:&enc)}             " Fileencoding or encoding
set statusline+=\ \|                                  " Space + Bar
set statusline+=\ @                                   " At
set statusline+=\ %l                                  " Current line num
set statusline+=:                                     " Colon
set statusline+=%c                                    " Current column num
set statusline+=\ %P                                  " Percentage file displayed in win
set statusline+=\ \|%{''}                             " Space, Bar, and empty char
" }}}

" {{{ Tabline
" https://stackoverflow.com/questions/33710069/how-to-write-tabline-function-in-vim
set tabline=%!MyTabLine()  " custom tab pages line
function! MyTabLine()
  let s = ' Theovim '
  for i in range(tabpagenr('$')) " loop through each tab page
    " Highlighting tab number. If inactive, slightly darker color
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif
    " Highlighting tab name. If inactive, grey
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#' " WildMenu
    else
      let s .= '%#Title#'
    endif

    let s .= '%' . (i + 1) . 'T '   " set the tab page number (for mouse clicks)
    let s .= i + 1 . ''             " set page number string

    " get buffer names and statuses
    let n = ''  " temp str for buf names
    let m = 0   " &modified counter
    let buflist = tabpagebuflist(i + 1)

    for b in buflist " loop through each buffer in a tab
      " Format help and non-modifiable buffer
      if getbufvar(b, "&modifiable")
        let n .= pathshorten(bufname(b)) . ' | '
      endif
      " Add count to modified buffer
      if getbufvar(b, "&modified")
        let m += 1
      endif
    endfor

    "let n .= fnamemodify(bufname(buflist[tabpagewinnr(i + 1) - 1]), ':t')
    let n = substitute(n, ', $', '', '')

    " Add modified label if there are more than one modified buffer in the tab
    if (m > 0)
      let s .= ' [' . m . '+]'
    endif

    if i + 1 == tabpagenr()
      let s .= ' %#TabLineSel#'
    else
      let s .= ' %#TabLine#'
    endif

    " add buffer names
    if n == ''
      let s.= '[New]'
    else
      let s .= n
    endif

    " switch to no underlining and add final space
    let s .= ' '
  endfor
  let s .= '%#TabLineFill#%T'  " Reset highlight

  " Close button on the right if there are multiple tabs. Why ternary? Why not
  let s .= (tabpagenr('$') > 1) ? ('%=%999X close') : ('')

  return s
endfunction
" }}}

" {{{ netrw
autocmd VimEnter * :Vexplore | wincmd p
let g:netrw_banner = 0 " No guide on the top, turn on if error occurs
let g:netrw_liststyle = 0 " 0 simple, 1 detailed, 2 thick, 3 tree
let g:netrw_browse_split = 3
let g:netrw_winsize = 15
aug netrw_auto_close
  au!
  au WinEnter * if tabpagenr('$') == 1 && winnr('$') == 1
  \ && getbufvar(winbufnr(winnr()), "&filetype") == 'netrw' | quit | endif
aug END

" Function to toggle netrw buffer using global var and buf wipeout
let g:NetrwIsOpen = 1 " Since I open netrw in the startup
function! ToggleNetrw()
  if g:NetrwIsOpen
    " bufnr('$') returns number of last buf,
    " and since range() isn't last index inclusive (like Python), add 1
    for i in range(bufnr('$') + 1)
      if (getbufvar(i, "&filetype") == 'netrw')
        silent exe 'bwipeout ' . i
      endif
    endfor
    let g:NetrwIsOpen = 0
  else
    let g:NetrwIsOpen = 1
    silent Lex
  endif
endfunction
" }}}

" {{{ CS240 Work Environment
" By Theo Park, special thanks to Shriansh Chari
" function CS240(hwNum)
"   exec 'cd ' . $HOME. '/cs240/' . a:hwNum . '/'
"   set colorcolumn=80
"   vs
"   " R source code file
"   winc l
"   exec 'open '. a:hwNum . '.c'
"   " Top L terminal
"   winc h
"   term
"   5winc+
"   " Bottom L header file
"   winc j
"   exec 'open '. a:hwNum . '.h'
"   winc l
" endfunction
" }}}


" {{{ Vim Plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'fadein/vim-figlet' " ASCII art generator. Requires figlet installed
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'MeF0504/vim-pets' " Cats period
Plug 'vimwiki/vimwiki' " Personal wiki plugin
call plug#end()
" }}}

" {{{ Plugin Keybindings
nnoremap <leader>ff :Files<CR>
nnoremap <leader>f/ :Lines<CR>
" }}}

" {{{ Vimwiki
let g:vimwiki_list = [{ 'path': '~/Nextcloud/theo-vimwiki/',
       \ 'syntax':'markdown', 'ext': '.md' }]
let g:vimwiki_global_ext = 1
" }}}

" {{{ Vim-pets
let g:pets_garden_width = 25
let g:pets_garden_height = 10
let g:pets_default_pet = 'cat'
" }}}
