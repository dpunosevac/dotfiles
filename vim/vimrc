"
" =====================================================================
" =========================== KICKSTART.VIM ===========================
" =====================================================================
"
" This is Theo's version of Kickstart.vim
" for note taking with Vimwiki and no LSP.
" https://github.com/theopn/kickstart.vim
"

let mapleader=' '
let maplocalleader = ' '

" [[ Plugins ]]
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
" Git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
" Automatic tabstop settings
Plug 'tpope/vim-sleuth'
" LSP and cmp
Plug 'ervandew/supertab'
" Which key
Plug 'liuchengxu/vim-which-key'
" Theme inspired by Atom
Plug 'joshdick/onedark.vim'
" Set airline as statusline
Plug 'vim-airline/vim-airline'
" Add indentation guides even on blank lines
"Plug 'Yggdroot/indentLine'
" "gc" to comment visual regions/lines
Plug 'tpope/vim-commentary'
" Fuzzy Finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Personal wiki
Plug 'vimwiki/vimwiki'
call plug#end()


" [[ Setting sensible default options ]]
filetype on
syntax on
set autoindent autoread background=dark backspace=indent,eol,start
set belloff=all display=lastline encoding=utf-8 hidden
set history=10000 hlsearch incsearch nojoinspaces
set laststatus=2 ruler showcmd
"listchars=tab:>\ ,trail:-,nbsp:+
set smarttab switchbuf=uselast wildmenu


" [[ Settings other options ]]
" UI
set number relativenumber
set cursorline cursorcolumn colorcolumn=80
set list listchars=leadmultispace:\|\ ,tab:>\ ,trail:-,nbsp:+ showbreak=$
set showtabline=2 scrolloff=7 termguicolors signcolumn=yes
" Split
set splitright splitbelow
" Search
set ignorecase smartcase
" Spell
set spell spelllang=en_us spellsuggest=best,8
" Others
set updatetime=250 timeoutlen=300
set mouse=a
set breakindent
set completeopt=menuone,noselect


" [[ Basic Keymaps ]]

" Keymaps for better default experience
nnoremap <silent> <Space> <Nop>
xnoremap <silent> <Space> <Nop>

" Remap for dealing with word wrap
nnoremap <expr> <silent> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> <silent> j v:count == 0 ? 'gj' : 'j'

" I need this keybinding or I will die
inoremap <silent> jk <ESC>
" Auto pairs
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap {<CR> {<CR>}<ESC>ko<TAB>
" Select all
nnoremap <leader>a gg<S-v>G
" Search
nnoremap <leader>/ :noh<CR>
nnoremap n nzz
nnoremap N Nzz
" Copy and paste
xnoremap <leader>y "+y
nnoremap <leader>p :reg<CR>
xnoremap <leader>p "_dP
" Terminal
tnoremap <ESC> <C-\><C-n>
nnoremap <leader>z :botright term<CR>
" Spell check
inoremap <C-s> <C-g>u<ESC>[s1z=`]a<C-g>u
" Buffer
nnoremap <leader>b :ls<CR>:b<SPACE>
nnoremap <leader>[ :bprevious<CR>
nnoremap <leader>] :bnext<CR>
nnoremap <leader>k :ls<CR>
      \: echo '[Theovim] Choose a buf to delete
      \(blank: choose curr buf, RET: confirm, ESC: cancel)'<CR>
      \:bdelete<SPACE>
" Window
fun! SmartWinMove(key)
  let t:currwin = winnr()
  exec 'wincmd ' . a:key
  if t:currwin == winnr()
    if a:key == 'h' || a:key == 'l'
      wincmd v
    else
      wincmd s
    endif
    exec 'wincmd ' . a:key
  endif
endfun
nnoremap <C-h> :call SmartWinMove('h')<CR>
nnoremap <C-j> :call SmartWinMove('j')<CR>
nnoremap <C-k> :call SmartWinMove('k')<CR>
nnoremap <C-l> :call SmartWinMove('l')<CR>
nnoremap <leader>+ :exe 'resize ' . (winheight(0) * 3/2)<CR>
nnoremap <leader>- :exe 'resize ' . (winheight(0) * 2/3)<CR>
nnoremap <leader>> :exe 'vertical resize ' . (winwidth(0) * 3/2)<CR>
nnoremap <leader>< :exe 'vertical resize ' . (winwidth(0) * 2/3)<CR>
" Tab
nnoremap <leader>t :ls<CR>
      \:echo '[Theovim] Choose a buf to create a new tab w/
      \(blank: choose curr buf, RET: confirm, ESC: cancel)'<CR>
      \:tab sb<SPACE>
nnoremap <leader>q :tabclose<CR>
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt

" [[ User commands ]]
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//ec
  call winrestview(l:save)
endfun
command TrimWhiespace call TrimWhitespace()

" [[ Bufferline ]]
" Custom bufferline function. I know, it's not the true "Vim way"
fun! SpawnBufferLine()
  let s = ' :) | '

  " Get the list of buffers. Use bufexists() to include hidden buffers
  let bufferNums = filter(range(1, bufnr('$')), 'buflisted(v:val)')
  " Making a buffer list on the left side
  for i in bufferNums
    " Highlight with yellow if it's the current buffer
    let s .= (i == bufnr()) ? ('%#TabLineSel#') : ('%#TabLine#')
    let s .= i . ' '  " Append the buffer number
    if bufname(i) == ''
      let s .= '[NEW]'  " Give a name to a new buffer
    endif
    if getbufvar(i, "&modifiable")
      let s .= fnamemodify(bufname(i), ':t')  " Append the file name
      " let s .= pathshorten(bufname(i))  " Use this if you want a trimmed path
      " If the buffer is modified, add + and separator. Else, add separator
      let s .= (getbufvar(i, "&modified")) ? (' [+] | ') : (' | ')
    else
      let s .= fnamemodify(bufname(i), ':t') . ' [RO] |'  " Add read only flag
    endif
  endfor
  let s .= '%#TabLineFill#%T '  " Reset highlight

  let s .= '%=' " Spacer

  " Making a tab list on the right side
  for i in range(1, tabpagenr('$'))  " Loop through the number of tabs
    " Highlight with yellow if it's the current tab
    let s .= (i == tabpagenr()) ? ('%#TabLineSel#') : ('%#TabLine#')
    let s .= '%' . i . 'T '  " set the tab page number (for mouse clicks)
    let s .= i . ''          " set page number string
  endfor
  let s .= '%#TabLineFill#%T'  " Reset highlight

  " Close button on the right if there are multiple tabs
  if tabpagenr('$') > 1
    let s .= '%999X X'
  endif
  return s
endfun

set tabline=%!SpawnBufferLine()  " Assign the tabline


" [[ Configure plugins ]]
" Make <Space> trigger key map guide
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" Set color scheme
colorscheme onedark
" Characters to render for indentation guide
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" Vimwiki
let g:vimwiki_list = [{ 'path': '~/Nextcloud/theo-vimwiki/',
       \ 'syntax':'markdown', 'ext': '.md' }]
let g:vimwiki_global_ext = 1

" [[ Configure Netrw ]]
let g:netrw_banner = 0 " No guide on the top, turn on if error occurs
let g:netrw_liststyle = 1 " 0 simple, 1 detailed, 2 thick, 3 tree
let g:netrw_browse_split = 3
let g:netrw_winsize = 15
augroup netrw_autocmds
  autocmd!
  " Close netrw if it is the last buffer
  autocmd WinEnter * if tabpagenr('$') == 1 && winnr('$') == 1
  \ && getbufvar(winbufnr(winnr()), "&filetype") == 'netrw' | quit | endif
  autocmd VimEnter * :Vexplore | wincmd p  " Netrw open on startup
augroup END

" Function to toggle netrw buffer using global var and buf wipeout
let g:NetrwIsOpen = 1 " Since I open netrw in the startup
fun! ToggleNetrw()
  if g:NetrwIsOpen
    for i in range(1, bufnr('$'))
      if getbufvar(i, "&filetype") == 'netrw'
        silent exe 'bwipeout ' . i
      endif
    endfor
    let g:NetrwIsOpen = 0
  else
    let g:NetrwIsOpen = 1
    silent Lex
  endif
endfun

nnoremap <leader>n :call ToggleNetrw()<CR>


" [[ Configure fzf.vim ]]
" See `:help fzf-vim`

" [?] Find recently opened files
nmap <leader>? :History<CR>
" [ ] Find existing buffers
nmap <leader><space> :Buffers<CR>
" [/] Fuzzily search in current buffer
nmap <leader>/ :BLines<CR>
" Search [G]it [F]iles
nmap <leader>gf :GFiles<CR>
" [S]earch [F]iles
nmap <leader>sf :Files<CR>
" [S]earch [H]elp
nmap <leader>sh :Helptags<CR>


" [[ Configure built-in keyword completion ]]
" Set Omni Completion
"  See `:help compl-omni` and `:help omnifunc`
set omnifunc=syntaxcomplete#Complete

" Enter key confirms the current selection when completion is open
inoremap <expr> <CR> pumvisible() ? '<C-y>' : '<CR>'


" The line beneath this is called `modeline`. See `:help modeline`
" vim: ts=2 sts=2 sw=2 et
