"===============================================================================
" "Nature is pleased with simplicity. And nature is no dummy” - Isaac Newton
"___________.__                   ____   ____.__
"\__    ___/|  |__   ____  ____   \   \ /   /|__| ____________   ____
"  |    |   |  |  \_/ __ \/  _ \   \   Y   / |  |/     \_  __ \_/ ___\
"  |    |   |   Y  \  ___(  <_> )   \     /  |  |  Y Y  \  | \/\  \___
"  |____|   |___|  /\___  >____/     \___/   |__|__|_|  /__|    \___  >
"                \/     \/                            \/            \/
"===============================================================================

" ---[[ Visual Related Setting
set number norelativenumber ruler colorcolumn=80 " Yes I hate relativenumber
set cursorline cursorcolumn
set wildmenu termguicolors bg=dark
colo gruvbox_noitalics
" --]]

" ---[[ Text Edit Related Settings
let mapleader=','
set tabstop=2 shiftwidth=2 expandtab autoindent
set mouse=a
set list listchars=tab:>\ ,trail:␣,nbsp:+
" --]]

" ---[[ Syntax Related Settings
filetype on
syntax on
set hlsearch incsearch shortmess-=S " Highlight, incremental, # result on bottom
set so=7 " Keep 7 lines visible at the top and bottom when scrolling
" Auto fold
set foldmethod=indent foldlevel=1
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
" --]]

" ---[[ Keybinding Related Settings
" Caps lock for ESC overrated
inoremap jj <ESC>
" Automatic closer for parenthesis, brackets, etc
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap {<CR> {<CR>}<ESC>ko<TAB>
" ESC to escape terminal
tnoremap <ESC> <C-\><C-n>
" Split pane navigation
nnoremap H <C-W>h
nnoremap J <C-W>j
nnoremap K <C-W>k
nnoremap L <C-W>l
" Automatic search result center
nmap n nzz
nmap N Nzz
" --]]

" ---[[ Statusline related settings
let g:currentmode={
  \ 'n' : 'Normal', 'no' : 'Normal·Operator Pending',
  \ 'v' : 'Visual', 'V' : 'V·Line', '^V' : 'V·Block',
  \ 's' : 'Select', 'S' : 'S·Line', '^S' : 'S·Block',
  \ 'i' : 'Insert', 'R' : 'Replace', 'Rv' : 'V·Replace',
  \ 'c' : 'Command', 'cv' : 'Vim Ex', 'ce' : 'Ex',
  \ 'r' : 'Prompt', 'rm' : 'More', 'r?' : 'Confirm',
  \ '!' : 'Shell', 't' : 'Terminal' }
set laststatus=2
set statusline=
set statusline+=%0*\[%n] " Buffer num
set statusline+=%1*\ %<%F\  " File ppath
set statusline+=%2*\ %y\  " FileType
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''} " Encoding
set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\  " Encoding2
set statusline+=%4*\ %{&ff}\  " FileFormat (dos/unix..)
set statusline+=%5*\ %#BLUE#[%{toupper(g:currentmode[mode()])}] " Current mode
set statusline+=%6*\ %=\ row:%l/%L\  " Row num
set statusline+=%7*\ col:%03c\  " Column num
set statusline+=%8*\ \ %m%r%w\ %P\  " + for change in buffer, top/bottom
set statusline+=%9*\ %#ORANGE#%{'Messing'}\ %{'w'}\ %{'vimrc'}\ %{'againʕ•́ᴥ•̀?'}
" --]]

" ---[[ netrw Related Settings
autocmd VimEnter * :Vexplore | wincmd p
let g:netrw_banner=1 " Guide on the top, known to error if disabled
let g:netrw_liststyle=0 " 0 simple, 1 detailed, 2 thick, 3 tree
let g:netrw_browse_split=3
let g:netrw_winsize = 20
aug netrw_auto_close
  au!
  au WinEnter * if tabpagenr('$') == 1  && winnr('$') == 1
  \ && getbufvar(winbufnr(winnr()), "&filetype") == "netrw" | quit | endif
aug EN
" --]]

" ---[[ CS240 Work Environment
" By Theo Park, special thanks to Shriansh Chari
function CS240(hwNum)
  exec 'cd ' . $HOME. '/cs240/' . a:hwNum . '/'
  set colorcolumn=80
  vs
  " R source code file
  winc l
  exec 'open '. a:hwNum . '.c'
  " Top L terminal
  winc h
  term
  5winc+
  " Bottom L header file
  winc j
  exec 'open '. a:hwNum . '.h'
  winc l
endfunction
" --]]